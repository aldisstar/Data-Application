# -*- coding: utf-8 -*-
"""Homework_3AS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QF0ZkFz5E_F-vKGl5IYn80WZ7H1ZctCj
"""

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

phases = {}
G = {}
num_nodes = []
num_edges = []


for i in range(1, 12):
    var_name = "phase" + str(i)
    file_name = "https://raw.githubusercontent.com/ragini30/Networks-Homework/main/" + var_name + ".csv"

    try:
        phases[i] = pd.read_csv(file_name, index_col=["players"])
        phases[i].columns = "n" + phases[i].columns
        phases[i].index = phases[i].columns
        phases[i][phases[i] > 0] = 1
        G[i] = nx.from_pandas_adjacency(phases[i])
        G[i].name = var_name

        # Calculate the number of nodes and edges and store them
        num_nodes.append(len(G[i]))
        num_edges.append(G[i].number_of_edges())

    except pd.errors.EmptyDataError:
        print(f"No data for {var_name}")



# Plot the evolution of the number of nodes and edges over time
plt.figure(figsize=(10, 6))
plt.plot(range(1, 12), num_nodes, label="Number of Nodes")
plt.plot(range(1, 12), num_edges, label="Number of Edges")
plt.xlabel("Phase")
plt.ylabel("Count")
plt.title("Evolution of Network Size")
plt.legend()
plt.show()


# Print the number of nodes and edges for phases 2, 6, and 10
for phase_number in [2, 6, 10]:
    if phase_number in G:
        G_phase = G[phase_number]
        num_nodes = len(G_phase)
        num_edges = G_phase.number_of_edges()
        print(f"Phase {phase_number}: Number of Nodes = {num_nodes}, Number of Edges = {num_edges}")
    else:
        print(f"No data for Phase {phase_number}")

!apt-get install graphviz graphviz-dev
!pip install pygraphviz

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# Read your data and create the graph for Phase 3
var_name = "phase3"
file_name = "https://raw.githubusercontent.com/ragini30/Networks-Homework/main/" + var_name + ".csv"
phases = pd.read_csv(file_name, index_col=["players"])
phases.columns = "n" + phases.columns
phases.index = phases.columns
phases[phases > 0] = 1
G = nx.from_pandas_adjacency(phases)
G.name = var_name

# Visualize the graph using Graphviz layout
pos = nx.drawing.nx_agraph.graphviz_layout(G)
plt.figure(figsize=(10, 10))
nx.draw(G, pos, with_labels=True)
plt.title("Graph for Phase 3")
plt.show()

import networkx as nx


nodes_of_interest = ['n1', 'n3', 'n12', 'n83']

# Initialize a dictionary to store degree centrality results for all phases
degree_centrality_results = {}

# Iterate through phases 3 and 9 and compute degree centrality for the nodes of interest
for phase_number in [3, 9]:
    # Check if the phase exists in the graph
    if phase_number in G:
        # Create a graph for the current phase
        G_phase = G[phase_number]

        # Check if all nodes of interest are present in the graph
        if all(node in G_phase.nodes for node in nodes_of_interest):
            # Compute the degree centrality for the current phase
            degree_centrality = nx.degree_centrality(G_phase)

            # Filter and store the results for nodes of interest in the dictionary
            degree_centrality_results[f'Phase {phase_number}'] = {node: degree_centrality[node] for node in nodes_of_interest}
        else:
            print(f'Warning: Nodes of interest not present in Phase {phase_number}')
    else:
        print(f'Warning: Phase {phase_number} does not exist in the graph.')

# Print the degree centrality results for phases 3 and 9
for phase, centrality in degree_centrality_results.items():
    print(f'Degree Centrality for {phase}:')
    for node, value in centrality.items():
        print(f'{node}: {value:.4f}')
    print()

import networkx as nx

# Initialize a dictionary to store eigenvector centrality results for all phases
eigen_centrality_results = {}

# Iterate through phases 3 and 9 and compute eigenvector centrality for the nodes of interest
for phase_number in [3, 9]:
    # Check if the phase exists in the graph
    if phase_number in G:
        # Create a graph for the current phase
        G_phase = G[phase_number]

        # Check if all nodes of interest are present in the graph
        if all(node in G_phase.nodes for node in nodes_of_interest):
            # Compute eigenvector centrality for the current phase
            eigen_centrality = nx.eigenvector_centrality(G_phase)

            # Filter and store the results for nodes of interest in the dictionary
            eigen_centrality_results[f'Phase {phase_number}'] = {node: eigen_centrality[node] for node in nodes_of_interest}
        else:
            print(f'Warning: Nodes of interest not present in Phase {phase_number}')
    else:
        print(f'Warning: Phase {phase_number} does not exist in the graph.')

# Print the eigenvector centrality results for phases 3 and 9
for phase, centrality in eigen_centrality_results.items():
    print(f'Eigenvector Centrality for {phase}:')
    for node, value in centrality.items():
        print(f'{node}: {value:.4f}')
    print()

import pandas as pd
import networkx as nx

# Define the list of players under investigation
players_under_investigation = ["n1", "n3", "n12", "n83"]  # Replace with the actual player names

# Initialize dictionaries to store data
phases = {}
G = {}

# Initialize a dictionary to store betweenness centrality for each player
betweenness_centrality_dict = {player: [] for player in players_under_investigation}

for i in range(1, 12):
    var_name = "phase" + str(i)
    file_name = "https://raw.githubusercontent.com/ragini30/Networks-Homework/main/" + var_name + ".csv"

    phases[i] = pd.read_csv(file_name, index_col=["players"])
    phases[i].columns = "n" + phases[i].columns
    phases[i].index = phases[i].columns
    phases[i][phases[i] > 0] = 1
    G[i] = nx.from_pandas_adjacency(phases[i])
    G[i].name = var_name

    # Calculate betweenness centrality for each player and store in the dictionary
    betweenness_centrality = nx.betweenness_centrality(G[i])
    for player in players_under_investigation:
        if player in betweenness_centrality:
            betweenness_centrality_dict[player].append(betweenness_centrality[player])
        else:
            betweenness_centrality_dict[player].append(0.0)

# Calculate the mean betweenness centrality for each player
mean_betweenness_centrality = {player: sum(values) / 11 for player, values in betweenness_centrality_dict.items()}

# Sort the players by mean betweenness centrality
sorted_players = sorted(mean_betweenness_centrality, key=mean_betweenness_centrality.get, reverse=True)

# Get the three players with the highest mean betweenness centrality
highest_player = sorted_players[0]
second_highest_player = sorted_players[1]
third_highest_player = sorted_players[2]

print(f"Highest: {highest_player}, 2nd highest: {second_highest_player}, and 3rd highest: {third_highest_player}")

import networkx as nx

# Define the list of nodes of interest
nodes_of_interest = ["n1", "n3", "n12", "n83"]  # Replace with the actual player names

# Initialize a dictionary to store eigenvector centrality results
eigenvector_centrality_results = {}

# Iterate through phases 3 and 9 and compute eigenvector centrality for the nodes of interest
for phase_number in [3, 9]:
    # Create a graph for the current phase
    G_phase = G[phase_number]

    # Compute the eigenvector centrality for the current phase
    eigenvector_centrality = nx.eigenvector_centrality(G_phase)

    # Filter and store the results for nodes of interest in the dictionary
    eigenvector_centrality_results[f'Phase {phase_number}'] = {node: eigenvector_centrality.get(node, 0.0) for node in nodes_of_interest}

# Calculate the mean eigenvector centrality for each player across the selected phases
mean_eigenvector_centrality = {node: (eigenvector_centrality_results['Phase 3'][node] + eigenvector_centrality_results['Phase 9'][node]) / 2 for node in nodes_of_interest}

# Print the mean eigenvector centrality for each player
for node, mean_centrality in mean_eigenvector_centrality.items():
    print(f"Mean Eigenvector Centrality for {node}: {mean_centrality:.4f}")

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# Initialize a figure for the grid of graphs
fig, axes = plt.subplots(3, 4, figsize=(16, 12))
fig.suptitle("Graphs for Phases 1 to 11")

# Loop through the 11 phases and create and display graphs
for i in range(1, 12):
    var_name = "phase" + str(i)
    file_name = "https://raw.githubusercontent.com/ragini30/Networks-Homework/main/" + var_name + ".csv"
    phases = pd.read_csv(file_name, index_col=["players"])
    phases.columns = "n" + phases.columns
    phases.index = phases.columns
    phases[phases > 0] = 1
    G = nx.from_pandas_adjacency(phases)
    G.name = var_name

    # Calculate subplot position in the 3x4 grid
    row = (i - 1) // 4
    col = (i - 1) % 4

    # Compute a Graphviz layout for the current phase
    pos = nx.drawing.nx_agraph.graphviz_layout(G)

    # Draw the graph in the current subplot
    nx.draw(G, pos, with_labels=True, ax=axes[row, col])
    axes[row, col].set_title(f"Phase {i}")

# Adjust layout and show the grid of graphs
plt.tight_layout()
plt.subplots_adjust(top=0.9)
plt.show()
